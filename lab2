

1.	Write a Pandas program to select distinct department id from employees file.

+---------------+----------------------+------------+-------------+
| DEPARTMENT_ID | DEPARTMENT_NAME      | MANAGER_ID | LOCATION_ID |
+---------------+----------------------+------------+-------------+
|            10 | Administration       |        200 |        1700 |
|            20 | Marketing            |        201 |        1800 |
|            30 | Purchasing           |        114 |        1700 |
|            40 | Human Resources      |        203 |        2400 |
|            50 | Shipping             |        121 |        1500 |
|            60 | IT                   |        103 |        1400 |
|            70 | Public Relations     |        204 |        2700 |
|            80 | Sales                |        145 |        2500 |
|            90 | Executive            |        100 |        1700 |
|           100 | Finance              |        108 |        1700 |
|           110 | Accounting           |        205 |        1700 |
|           120 | Treasury             |          0 |        1700 |
|           130 | Corporate Tax        |          0 |        1700 |
|           140 | Control And Credit   |          0 |        1700 |
|           150 | Shareholder Services |          0 |        1700 |
|           160 | Benefits             |          0 |        1700 |
|           170 | Manufacturing        |          0 |        1700 |
|           180 | Construction         |          0 |        1700 |
|           190 | Contracting          |          0 |        1700 |
|           200 | Operations           |          0 |        1700 |
|           210 | IT Support           |          0 |        1700 |
|           220 | NOC                  |          0 |        1700 |
|           230 | IT Helpdesk          |          0 |        1700 |
|           240 | Government Sales     |          0 |        1700 |
|           250 | Retail Sales         |          0 |        1700 |
|           260 | Recruiting           |          0 |        1700 |
|           270 | Payroll              |          0 |        1700 |
+---------------+----------------------+------------+-------------


import pandas as pd
data = {
    'DEPARTMENT_ID': [10, 20, 30, 10, 40],
    'DEPARTMENT_NAME': ['Administration', 'Marketing', 'Purchasing', 'Administration', 'Human Resources'],
    'MANAGER_ID': [200, 201, 114, 200, 203],
    'LOCATION_ID': [1700, 1800, 1700, 1700, 2400]
}
df = pd.DataFrame(data)
unique_dept_ids = df['DEPARTMENT_ID'].drop_duplicates()
print("Unique Department IDs:")
for dept_id in unique_dept_ids:
    print(dept_id)

                                            
2.	Write a Pandas program to display the ID for those employees who did two or more jobs in the past.
+-------------+------------+------------+------------+---------------+
| EMPLOYEE_ID | START_DATE | END_DATE   | JOB_ID     | DEPARTMENT_ID |
+-------------+------------+------------+------------+---------------+
|         102 | 2001-01-13 | 2006-07-24 | IT_PROG    |            60 |
|         101 | 1997-09-21 | 2001-10-27 | AC_ACCOUNT |           110 |
|         101 | 2001-10-28 | 2005-03-15 | AC_MGR     |           110 |
|         201 | 2004-02-17 | 2007-12-19 | MK_REP     |            20 |
|         114 | 2006-03-24 | 2007-12-31 | ST_CLERK   |            50 |
|         122 | 2007-01-01 | 2007-12-31 | ST_CLERK   |            50 |
|         200 | 1995-09-17 | 2001-06-17 | AD_ASST    |            90 |
|         176 | 2006-03-24 | 2006-12-31 | SA_REP     |            80 |
|         176 | 2007-01-01 | 2007-12-31 | SA_MAN     |            80 |
|         200 | 2002-07-01 | 2006-12-31 | AC_ACCOUNT |            90 |
+-------------+------------+------------+------------+---------------+
import pandas as pd
data = {
    'EMPLOYEE_ID': [102, 101, 101, 201, 176, 176],
    'START_DATE': ['2001-01-13', '1997-09-21', '2001-10-28', '2004-02-17', '2006-03-24', '2007-01-01'],
    'END_DATE': ['2006-07-24', '2001-10-27', '2005-03-15', '2007-12-19', '2006-12-31', '2007-12-31'],
    'JOB_ID': ['IT_PROG', 'AC_ACCOUNT', 'AC_MGR', 'MK_REP', 'SA_REP', 'SA_MAN'],
    'DEPARTMENT_ID': [60, 110, 110, 20, 80, 80]
}
df = pd.DataFrame(data)
job_counts = df.groupby('EMPLOYEE_ID')['JOB_ID'].nunique()
employees_with_multiple_jobs = job_counts[job_counts >= 2].index
print("Employees who held two or more jobs:")
for emp_id in employees_with_multiple_jobs:
    print(emp_id)


3.	Write a Pandas program to display the details of jobs in descending sequence on job title.
+------------+---------------------------------+------------+------------+
| JOB_ID     | JOB_TITLE                       | MIN_SALARY | MAX_SALARY |
+------------+---------------------------------+------------+------------+
| AD_PRES    | President                       |      20080 |      40000 |
| AD_VP      | Administration Vice President   |      15000 |      30000 |
| AD_ASST    | Administration Assistant        |       3000 |       6000 |
| FI_MGR     | Finance Manager                 |       8200 |      16000 |
| FI_ACCOUNT | Accountant                      |       4200 |       9000 |
| AC_MGR     | Accounting Manager              |       8200 |      16000 |
| AC_ACCOUNT | Public Accountant               |       4200 |       9000 |
| SA_MAN     | Sales Manager                   |      10000 |      20080 |
| SA_REP     | Sales Representative            |       6000 |      12008 |
| PU_MAN     | Purchasing Manager              |       8000 |      15000 |
| PU_CLERK   | Purchasing Clerk                |       2500 |       5500 |
| ST_MAN     | Stock Manager                   |       5500 |       8500 |
| ST_CLERK   | Stock Clerk                     |       2008 |       5000 |
| SH_CLERK   | Shipping Clerk                  |       2500 |       5500 |
| IT_PROG    | Programmer                      |       4000 |      10000 |
| MK_MAN     | Marketing Manager               |       9000 |      15000 |
| MK_REP     | Marketing Representative        |       4000 |       9000 |
| HR_REP     | Human Resources Representative  |       4000 |       9000 |
| PR_REP     | Public Relations Representative |       4500 |      10500 |
+------------+---------------------------------+------------+------------+
import pandas as pd
data = {
    'JOB_ID': ['AD_PRES', 'AD_VP', 'FI_MGR', 'SA_MAN', 'PR_REP'],
    'JOB_TITLE': ['President', 'Administration Vice President', 'Finance Manager', 'Sales Manager', 'Public Relations Representative'],
    'MIN_SALARY': [20080, 15000, 8200, 10000, 4500],
    'MAX_SALARY': [40000, 30000, 16000, 20080, 10500]
}
df = pd.DataFrame(data)
df_sorted = df.sort_values(by='JOB_TITLE', ascending=False)
print("Jobs sorted by job title in descending order:")
print(df_sorted)


4.Write a Pandas program to create a line plot of the historical stock prices of Alphabet Inc. between two specific dates.

import pandas as pd
import matplotlib.pyplot as plt
data = {
    'Date': ['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05'],
    'Open': [135.5, 136.0, 137.5, 138.2, 139.0],
    'High': [137.0, 138.0, 139.0, 140.0, 141.0],
    'Low': [134.5, 135.0, 136.5, 137.0, 138.0],
    'Close': [136.2, 137.5, 138.8, 139.5, 140.2],
    'Volume': [1000000, 1050000, 1020000, 980000, 1100000]
}
df = pd.DataFrame(data)
df['Date'] = pd.to_datetime(df['Date'])
df.set_index('Date', inplace=True)
start_date = '2023-01-02'
end_date = '2023-01-04'
df_filtered = df.loc[start_date:end_date]
plt.figure(figsize=(10, 6))
plt.plot(df_filtered.index, df_filtered['Close'], marker='o', linestyle='-', color='b')
plt.title("Alphabet Inc. Stock Prices")
plt.xlabel("Date")
plt.ylabel("Closing Price")
plt.grid(True)
plt.show()


4.	Write a Pandas program to create a bar plot of the trading volume of Alphabet Inc. stock between two specific dates.
import pandas as pd
import matplotlib.pyplot as plt
data = {
    'Date': ['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05'],
    'Volume': [1000000, 1050000, 1020000, 980000, 1100000]
}
df = pd.DataFrame(data)
df['Date'] = pd.to_datetime(df['Date'])
start_date = '2023-01-02'
end_date = '2023-01-04'
df_filtered = df[(df['Date'] >= start_date) & (df['Date'] <= end_date)]
plt.figure(figsize=(8, 5))
plt.bar(df_filtered['Date'], df_filtered['Volume'], color='skyblue')
plt.title("Alphabet Inc. Trading Volume")
plt.xlabel("Date")
plt.ylabel("Volume")
plt.show()


5.	Write a Pandas program to create a scatter plot of the trading volume/stock prices of Alphabet Inc. stock between two specific dates.
alphabet_stock_data:
import pandas as pd
import matplotlib.pyplot as plt
data = {
    'Date': ['01-04-2020', '02-04-2020', '03-04-2020', '06-04-2020', '07-04-2020'],
    'Open': [1122, 1098.26, 1119.015, 1138, 1206.1],
    'High': [1129.69, 1126.86, 1123.54, 1194.66, 1212.07],
    'Low': [1097.45, 1096.4, 1079.81, 1130.94, 1188.16],
    'Close': [1105.62, 1108.84, 1097.98, 1186.92, 1196.51],
    'Volume': [2343100, 1964000, 2343400, 2664700, 2977500]
}
df = pd.DataFrame(data)
df['Date'] = pd.to_datetime(df['Date'])
plt.figure(figsize=(10, 6))
plt.scatter(df['Date'], df['Volume'], color='blue', label='Trading Volume')
plt.scatter(df['Date'], df['Close'], color='red', label='Closing Price')
plt.xlabel('Date')
plt.ylabel('Value')
plt.title('Trading Volume and Stock Prices of Alphabet Inc.')
plt.legend()
plt.grid(True)
plt.show()

6.	Write a Pandas program to create a Pivot table and find the maximum and minimum sale value of the items.(refer sales_data table)
import pandas as pd
data = {
    'Item': ['Item A', 'Item B', 'Item A', 'Item B', 'Item C', 'Item A', 'Item C'],
    'Units_Sold': [20, 15, 30, 12, 18, 25, 22]
}
sales_data = pd.DataFrame(data)
pivot_table = sales_data.pivot_table(
    index='Item',
    values='Units_Sold',
    aggfunc='sum'
)
pivot_table.columns = ['Total_Units_Sold']
pivot_table = pivot_table.reset_index()
print(pivot_table)


7.	Write a Pandas program to create a Pivot table and find the item wise unit sold..(refer sales_data table)
import pandas as pd
data = {
    'Item': ['Item A', 'Item B', 'Item A', 'Item B', 'Item C', 'Item A', 'Item C'],
    'Units_Sold': [20, 15, 30, 12, 18, 25, 22]
}
sales_data = pd.DataFrame(data)
pivot_table = sales_data.pivot_table(
    index='Item',
    values='Units_Sold',
    aggfunc='sum'
)
pivot_table.columns = ['Total_Units_Sold']
pivot_table = pivot_table.reset_index()
print(pivot_table)


8.	Write a Pandas program to create a Pivot table and find the total sale amount region wise, manager wise, sales man wise..(refer sales_data table)
Sales_data:

import pandas as pd
sales_data = {
    'OrderDate': ['1-6-18', '1-23-18', '2-9-18', '2-26-18', '3-15-18', '4-1-18', '4-18-18', '5-5-18', '5-22-18',
                  '6-8-18', '6-25-18', '7-12-18', '7-29-18', '8-15-18', '9-1-18', '9-18-18', '10-5-18', '10-22-18'],
    'Region': ['East', 'Central', 'Central', 'Central', 'West', 'East', 'Central', 'Central', 'West',
               'East', 'Central', 'East', 'East', 'East', 'Central', 'East', 'Central', 'East'],
    'Manager': ['Martha', 'Hermann', 'Hermann', 'Timothy', 'Timothy', 'Martha', 'Martha', 'Hermann', 'Douglas',
                'Martha', 'Hermann', 'Martha', 'Douglas', 'Martha', 'Douglas', 'Martha', 'Hermann', 'Martha'],
    'SalesMan': ['Alexander', 'Shelli', 'Luis', 'David', 'Stephen', 'Alexander', 'Steven', 'Luis', 'Michael',
                 'Alexander', 'Sigal', 'Diana', 'Karen', 'Alexander', 'John', 'Alexander', 'Sigal', 'Alexander'],
    'Item': ['Television', 'Home Theater', 'Television', 'Cell Phone', 'Television', 'Home Theater', 'Television',
             'Television', 'Television', 'Home Theater', 'Television', 'Home Theater', 'Home Theater', 'Television',
             'Desk', 'Video Games', 'Home Theater', 'Cell Phone'],
    'Units': [95, 50, 36, 27, 56, 60, 75, 90, 32, 60, 90, 29, 81, 35, 2, 16, 28, 64],
    'Unit_price': [1198.00, 500.00, 1198.00, 225.00, 1198.00, 500.00, 1198.00, 1198.00, 1198.00, 500.00, 1198.00,
                   500.00, 500.00, 1198.00, 125.00, 58.50, 500.00, 225.00],
    'Sale_amt': [113810.00, 25000.00, 43128.00, 6075.00, 67088.00, 30000.00, 89850.00, 107820.00, 38336.00, 
                 30000.00, 107820.00, 14500.00, 40500.00, 41930.00, 250.00, 936.00, 14000.00, 14400.00]
}
df = pd.DataFrame(sales_data)
df['OrderDate'] = pd.to_datetime(df['OrderDate'])
df['Sale_amt'] = pd.to_numeric(df['Sale_amt'], errors='coerce')
pivot_table = pd.pivot_table(df, values='Sale_amt', index=['Region', 'Manager', 'SalesMan'], aggfunc='sum')
print(pivot_table)

10.Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight the negative numbers red and positive numbers black.
 import pandas as pd
import numpy as np
# Step 1: Create a DataFrame with 10 rows and 4 columns of random values
df = pd.DataFrame(np.random.randn(10, 4), columns=['A', 'B', 'C', 'D'])
# Step 2: Define a function to highlight negative numbers in red and positive numbers in black
def highlight_negative(val):
    color = 'red' if val < 0 else 'black'
    return f'color: {color}'
# Step 3: Apply the style to the DataFrame
styled_df = df.style.applymap(highlight_negative)
# Display the styled DataFrame
styled_df


11.Create a dataframe of ten rows, four columns with random values. Convert some values to nan values. Write a Pandas program which will highlight the nan values.
import pandas as pd
import numpy as np
# Step 1: Create a DataFrame with random values
np.random.seed(0)
df = pd.DataFrame(np.random.randn(10, 4), columns=['A', 'B', 'C', 'D'])
# Step 2: Introduce NaN values into specific cells
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 0] = np.nan
df.iloc[5, 1] = np.nan
df.iloc[7, 2] = np.nan
df.iloc[9, 3] = np.nan
# Step 3: Define a DataFrame that highlights NaN values
highlight_nan = df.isna().replace({True: 'background-color: red', False: ''})
# Step 4: Apply the highlighting DataFrame to the original DataFrame
styled_df = df.style.apply(lambda x: highlight_nan, axis=None)
# Display the styled DataFrame
styled_df

12.Create a dataframe of ten rows, four columns with random values. Write a Pandas program to set dataframe background Color black and font color yellow.
 

13.Write a Pandas program to detect missing values of a given DataFrame. Display True or False.
 

14. Write a Pandas program to find and replace the missing values in a given DataFrame which do not have any valuable information.
 

15.Write a Pandas program to keep the rows with at least 2 NaN values in a given DataFrame.
 

16.Write a Pandas program to split the following dataframe into groups based on school code. Also check the type of GroupBy object.
 import pandas as pd
df = pd.DataFrame({
    'A': [1, 2, None, 4],
    'B': [None, 'Y', 'N', 'Y'],
    'C': [10, None, 30, 40]
})
df['A'].fillna(df['A'].mean(), inplace=True)
df['B'].fillna(df['B'].mode()[0], inplace=True)
df['C'].fillna(df['C'].median(), inplace=True)
print(df)


17.Write a Pandas program to split the following dataframe by school code and get mean, min, and max value of age for each school.
import pandas as pd
data = {
    'school_code': ['S1', 'S2', 'S1', 'S2', 'S3', 'S1'],
    'age': [15, 17, 14, 16, 18, 13]
}
df = pd.DataFrame(data)
result = df.groupby('school_code')['age'].agg(['mean', 'min', 'max'])
print(result)


18.Write a Pandas program to split the following given dataframe into groups based on school code and class.
 import pandas as pd
data = {
    'school_code': ['S1', 'S1', 'S2', 'S2', 'S3', 'S3'],
    'class': ['A', 'B', 'A', 'B', 'A', 'B'],
    'age': [15, 14, 17, 16, 18, 13]
}
df = pd.DataFrame(data)
grouped = df.groupby(['school_code', 'class'])
for (school, cls), group in grouped:
    print(f"\nSchool: {school}, Class: {cls}")
    print(group)


19.Write a Pandas program to display the dimensions or shape of the World alcohol consumption dataset. Also extract the column names from the dataset.
 import pandas as pd
data = {
    'Year': [1986, 1986, 1986],
    'Country': ['Canada', 'Canada', 'France'],
    'Beverage_Type': ['Beer', 'Wine', 'Beer'],
    'Alcohol_Consumption': [5.0, 1.2, 4.5]
}
df = pd.DataFrame(data)
dimensions = df.shape
column_names = df.columns.tolist()
print("Dimensions (rows, columns):", dimensions)
print("Column names:", column_names)


20.Write a Pandas program to find the index of a given substring of a DataFrame column.
import pandas as pd
data = {
    'Name': ['Alice Johnson', 'Bob Smith', 'Charlie Brown', 'David Johnson'],
    'Age': [24, 30, 18, 45]
}
df = pd.DataFrame(data)
substring = 'Johnson'
indices = df[df['Name'].str.contains(substring, na=False)].index.tolist()
print("Indices of rows containing substring:", indices)


21.Write a Pandas program to swap the cases of a specified character column in a given DataFrame.
import pandas as pd
data = {
    'Name': ['Alice Johnson', 'Bob SMITH', 'Charlie Brown'],
    'Age': [24, 30, 18]
}
df = pd.DataFrame(data)
df['Name'] = df['Name'].str.swapcase()
print(df)


22.Write a Python program to draw a line with suitable label in the x axis, y axis and a title.
import matplotlib.pyplot as plt
x = [1, 2, 3, 4, 5]
y = [2, 3, 5, 7, 11]
plt.plot(x, y, marker='o')
plt.xlabel('X Axis Label')
plt.ylabel('Y Axis Label')
plt.title('Line Plot Example')
plt.show()


23.Write a Python program to draw a line using given axis values taken from a text file, with suitable label in the x axis, y axis and a title.
Test Data:
test.txt
1 2
2 4
3 1
 import matplotlib.pyplot as plt
x, y = [], []
data = """1 2
2 4
3 1"""
for line in data.splitlines():
    values = line.split()
    x.append(int(values[0]))
    y.append(int(values[1]))
plt.plot(x, y, marker='o')
plt.xlabel('X Axis Label')
plt.ylabel('Y Axis Label')
plt.title('Line Plot from File Data')
plt.show()


24.Write a Python program to draw line charts of the financial data of Alphabet Inc. between October 3, 2016 to October 7, 2016.
Sample Financial data (fdata.csv):
Date,Open,High,Low,Close
10-03-16,774.25,776.065002,769.5,772.559998
10-04-16,776.030029,778.710022,772.890015,776.429993
10-05-16,779.309998,782.070007,775.650024,776.469971
10-06-16,779,780.47998,775.539978,776.859985
10-07-16,779.659973,779.659973,770.75,775.080017
 import pandas as pd
import matplotlib.pyplot as plt
from io import StringIO
data = """Date,Open,High,Low,Close
10-03-16,774.25,776.065002,769.5,772.559998
10-04-16,776.030029,778.710022,772.890015,776.429993
10-05-16,779.309998,782.070007,775.650024,776.469971
10-06-16,779,780.47998,775.539978,776.859985
10-07-16,779.659973,779.659973,770.75,775.080017"""
df = pd.read_csv(StringIO(data), parse_dates=['Date'], dayfirst=True)
plt.plot(df['Date'], df['Open'], label='Open')
plt.plot(df['Date'], df['High'], label='High')
plt.plot(df['Date'], df['Low'], label='Low')
plt.plot(df['Date'], df['Close'], label='Close')
plt.xlabel('Date')
plt.ylabel('Price ($)')
plt.title('Alphabet Inc. Financial Data (Oct 3, 2016 - Oct 7, 2016)')
plt.legend()
plt.show()


25.Write a Python program to plot two or more lines with legends, different widths and colors.
 import matplotlib.pyplot as plt
x = [1, 2, 3, 4, 5]
y1 = [1, 4, 9, 16, 25]
y2 = [25, 20, 15, 10, 5]
plt.plot(x, y1, label='Line 1', color='blue', linewidth=2)
plt.plot(x, y2, label='Line 2', color='red', linewidth=3)
plt.legend()
plt.xlabel('X Axis')
plt.ylabel('Y Axis')
plt.title('Multiple Lines with Different Widths and Colors')
plt.show()


26.Write a Python program to create multiple plots.
 import matplotlib.pyplot as plt
import numpy as np
x = np.linspace(1, 10, 10)              
y = x ** 2                               
bar_data = [5, 7, 3, 8, 9]               
scatter_y = np.random.randint(1, 10, 10) 
hist_data = np.random.normal(0, 1, 1000) 
# Create a 2x2 grid of subplots
fig, axs = plt.subplots(2, 2, figsize=(10, 8))
# Line plot
axs[0, 0].plot(x, y, color='blue', marker='o')
axs[0, 0].set_title('Line Plot')
axs[0, 0].set_xlabel('X-axis')
axs[0, 0].set_ylabel('Y-axis')
# Bar plot
axs[0, 1].bar(range(len(bar_data)), bar_data, color='green')
axs[0, 1].set_title('Bar Plot')
axs[0, 1].set_xlabel('Category')
axs[0, 1].set_ylabel('Values')
# Scatter plot
axs[1, 0].scatter(x, scatter_y, color='red')
axs[1, 0].set_title('Scatter Plot')
axs[1, 0].set_xlabel('X-axis')
axs[1, 0].set_ylabel('Y-axis')
# Histogram
axs[1, 1].hist(hist_data, bins=20, color='purple')
axs[1, 1].set_title('Histogram')
axs[1, 1].set_xlabel('Value')
axs[1, 1].set_ylabel('Frequency')
# Adjust layout and display the plots
plt.tight_layout()
plt.show()

27.Write a Python programming to display a bar chart of the popularity of programming Languages.
Sample data:
Programming languages: Java, Python, PHP, JavaScript, C#, C++
Popularity: 22.2, 17.6, 8.8, 8, 7.7, 6.7
 import matplotlib.pyplot as plt
languages = ["Java", "Python", "PHP", "JavaScript", "C#", "C++"]
popularity = [22.2, 17.6, 8.8, 8.0, 7.7, 6.7]
plt.figure(figsize=(10, 6))
plt.bar(languages, popularity, color='skyblue')
plt.xlabel('Programming Languages')
plt.ylabel('Popularity (%)')
plt.title('Popularity of Programming Languages')
plt.ylim(0, 25)  
plt.show()

28.Write a Python programming to display a horizontal bar chart of the popularity of programming Languages.
Sample data:
Programming languages: Java, Python, PHP, JavaScript, C#, C++
Popularity: 22.2, 17.6, 8.8, 8, 7.7, 6.7
 import matplotlib.pyplot as plt
languages = ["Java", "Python", "PHP", "JavaScript", "C#", "C++"]
popularity = [22.2, 17.6, 8.8, 8.0, 7.7, 6.7]
plt.figure(figsize=(10, 6))
plt.barh(languages, popularity, color='skyblue')
plt.xlabel('Popularity (%)')
plt.ylabel('Programming Languages')
plt.title('Popularity of Programming Languages')
plt.xlim(0, 25)  
plt.show()


29.Write a Python programming to display a bar chart of the popularity of programming Languages. Use different color for each bar.
Sample data:
Programming languages: Java, Python, PHP, JavaScript, C#, C++
Popularity: 22.2, 17.6, 8.8, 8, 7.7, 6.7
 import matplotlib.pyplot as plt
languages = ["Java", "Python", "PHP", "JavaScript", "C#", "C++"]
popularity = [22.2, 17.6, 8.8, 8.0, 7.7, 6.7]
colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown']
plt.figure(figsize=(10, 6))
plt.bar(languages, popularity, color=colors)
plt.xlabel('Programming Languages')
plt.ylabel('Popularity (%)')
plt.title('Popularity of Programming Languages')
plt.ylim(0, 25)  
plt.show()

30.Write a Python program to create bar plot of scores by group and gender. Use multiple X values on the same chart for men and women.
Sample Data:
Means (men) = (22, 30, 35, 35, 26)
Means (women) = (25, 32, 30, 35, 29)
 import matplotlib.pyplot as plt
import numpy as np
means_men = [22, 30, 35, 35, 26]
means_women = [25, 32, 30, 35, 29]
groups = ['G1', 'G2', 'G3', 'G4', 'G5'] 
x = np.arange(len(groups))  
width = 0.35  
plt.figure(figsize=(10, 6))
plt.bar(x - width/2, means_men, width, label='Men', color='blue')
plt.bar(x + width/2, means_women, width, label='Women', color='orange')
plt.xlabel('Groups')
plt.ylabel('Scores')
plt.title('Scores by Group and Gender')
plt.xticks(x, groups) 
plt.legend()
plt.show()

31.Write a Python program to create a stacked bar plot with error bars.
Note: Use bottom to stack the women?s bars on top of the men?s bars.
Sample Data:
Means (men) = (22, 30, 35, 35, 26)
Means (women) = (25, 32, 30, 35, 29)
Men Standard deviation = (4, 3, 4, 1, 5)
Women Standard deviation = (3, 5, 2, 3, 3)
 import matplotlib.pyplot as plt
import numpy as np
means_men = [22, 30, 35, 35, 26]
means_women = [25, 32, 30, 35, 29]
std_dev_men = [4, 3, 4, 1, 5]
std_dev_women = [3, 5, 2, 3, 3]
groups = ['G1', 'G2', 'G3', 'G4', 'G5']  
x = np.arange(len(groups))  
width = 0.5  
plt.figure(figsize=(10, 6))
plt.bar(x, means_men, width, yerr=std_dev_men, label='Men', color='blue')
plt.bar(x, means_women, width, bottom=means_men, yerr=std_dev_women, label='Women', color='orange')
plt.xlabel('Groups')
plt.ylabel('Scores')
plt.title('Stacked Bar Plot of Scores by Group and Gender with Error Bars')
plt.xticks(x, groups)  
plt.legend()
plt.show()

32.Write a Python program to draw a scatter graph taking a random distribution in X and Y and plotted against each other.
 import matplotlib.pyplot as plt
import numpy as np
np.random.seed(0)  
x = np.random.rand(50) * 100  
y = np.random.rand(50) * 100  
plt.figure(figsize=(8, 6))
plt.scatter(x, y, color='blue', alpha=0.6)
plt.xlabel('X-axis (Random Distribution)')
plt.ylabel('Y-axis (Random Distribution)')
plt.title('Scatter Plot of Random Distribution in X and Y')
plt.show()


33.Write a Python program to draw a scatter plot with empty circles taking a random distribution in X and Y and plotted against each other.
 import matplotlib.pyplot as plt
import numpy as np
np.random.seed(0)  
x = np.random.rand(50) * 100  
y = np.random.rand(50) * 100  
plt.figure(figsize=(8, 6))
plt.scatter(x, y, color='blue', edgecolor='black', facecolors='none', alpha=0.7)
plt.xlabel('X-axis (Random Distribution)')
plt.ylabel('Y-axis (Random Distribution)')
plt.title('Scatter Plot of Random Distribution in X and Y with Empty Circles')
plt.show()

34.Write a Python program to draw a scatter plot using random distributions to generate balls of different sizes.
import matplotlib.pyplot as plt
import numpy as np
np.random.seed(0)  
x = np.random.rand(50) * 100  
y = np.random.rand(50) * 100  
sizes = np.random.rand(50) * 1000  
plt.figure(figsize=(8, 6))
plt.scatter(x, y, s=sizes, color='blue', alpha=0.6, edgecolor='black')
plt.xlabel('X-axis (Random Distribution)')
plt.ylabel('Y-axis (Random Distribution)')
plt.title('Scatter Plot of Random Distribution with Balls of Different Sizes')
plt.show()

35.Write a Python program to draw a scatter plot comparing two subject marks of Mathematics and Science. Use marks of 10 students.
Sample data:
Test Data:
math_marks = [88, 92, 80, 89, 100, 80, 60, 100, 80, 34]
science_marks = [35, 79, 79, 48, 100, 88, 32, 45, 20, 30]
marks_range = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
 import matplotlib.pyplot as plt
math_marks = [88, 92, 80, 89, 100, 80, 60, 100, 80, 34]
science_marks = [35, 79, 79, 48, 100, 88, 32, 45, 20, 30]
marks_range = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
plt.figure(figsize=(8, 6))
plt.scatter(math_marks, science_marks, color='purple', edgecolor='black', alpha=0.6)
plt.xlabel('Math Marks')
plt.ylabel('Science Marks')
plt.title('Comparison of Mathematics and Science Marks')
plt.plot(marks_range, marks_range, color='gray', linestyle='--', label='Equal Marks Line')
plt.legend()
plt.show()

36.Write a Python program to draw a scatter plot for three different groups comparing weights and heights.
 import matplotlib.pyplot as plt
import numpy as np
weights_group1 = np.random.normal(60, 5, 50)
heights_group1 = np.random.normal(160, 5, 50)
weights_group2 = np.random.normal(70, 5, 50)
heights_group2 = np.random.normal(170, 5, 50)
weights_group3 = np.random.normal(80, 5, 50)
heights_group3 = np.random.normal(180, 5, 50)
plt.scatter(weights_group1, heights_group1, color='blue', label='Group 1')
plt.scatter(weights_group2, heights_group2, color='green', label='Group 2')
plt.scatter(weights_group3, heights_group3, color='red', label='Group 3')
plt.xlabel('Weight (kg)')
plt.ylabel('Height (cm)')
plt.legend()
plt.title('Scatter Plot of Weights vs Heights for Three Groups')
plt.show()


37.Write a Pandas program to create a dataframe from a dictionary and display it.
Sample data: {'X':[78,85,96,80,86], 'Y':[84,94,89,83,86],'Z':[86,97,96,72,83]}
 import pandas as pd
data = {'X': [78, 85, 96, 80, 86], 
        'Y': [84, 94, 89, 83, 86], 
        'Z': [86, 97, 96, 72, 83]}
df = pd.DataFrame(data)
print(df)

38.Write a Pandas program to create and display a DataFrame from a specified dictionary data which has the index labels.
Sample Python dictionary data and list labels:
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
import pandas as pd
import numpy as np
exam_data = {
    'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
    'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
    'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
    'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']
}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
df = pd.DataFrame(exam_data, index=labels)
print(df)

39.Write a Pandas program to get the first 3 rows of a given DataFrame.
Sample Python dictionary data and list labels:
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
import pandas as pd
import numpy as np
exam_data = {
    'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
    'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
    'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
    'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']
}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
df = pd.DataFrame(exam_data, index=labels)
first_three_rows = df.head(3)
print(first_three_rows)


40.	Write a Pandas program to select the 'name' and 'score' columns from the following DataFrame.
Sample Python dictionary data and list labels:
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
import pandas as pd
import numpy as np
exam_data = {
    'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
    'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
    'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
    'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']
}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
df = pd.DataFrame(exam_data, index=labels)
selected_columns = df[['name', 'score']]
print(selected_columns)
